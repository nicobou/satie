TITLE:: SatieConfiguration
summary:: Configuration of the SATIE server
categories:: Libraries
related:: Overview/SATIE-Overview, Classes/Satie

DESCRIPTION::
This class configures SATIE. It also provides access to the server options.


CLASSMETHODS::

METHOD:: new
Create a new configuration

ARGUMENT:: server
The server instance. The server should not be booted. Only supernova should be used with SATIE.

ARGUMENT:: listeningFormat
An array of listening formats. The default is TELETYPE::[\stereoListener]::. Can be configured with one or more listening formats, each with their own TELETYPE::outBusIndex:: value. For a partial list of available formats, see LINK::#-handleSpatFormat::.

ARGUMENT:: numAudioAux
A number of auxiliary channels. Auxiliary channels are used for routing audio signals to effects, espcially, but can have other uses.

ARGUMENT:: outBusIndex
An array of output channel offset values for the TELETYPE::listeningFormats::. There must be exactly one offset value per TELETYPE::listeningFormat::. The default is TELETYPE::[0]::, which configures a single TELETYPE::listeningFormat:: such that its signal is output starting from the server's first output channel. Overlapping or non-congruous channel setups are allowed (for the latter see TELETYPE::minOutputBusChannels:: below).

ARGUMENT:: ambiOrders
A list of orders for higher order ambisonics. Currently SATIE supports SC-HOA, which supports up to 5th order. You can specify any number of ambisonic orders.

ARGUMENT:: minOutputBusChannels
The minimum number of server outputs channels. The default is TELETYPE::0::. This will ensure the server has at least this number of outputs. This can be used to guarantee an adequate number of output channels when doing non-congruous TELETYPE::outBusIndex:: setups.

ARGUMENT:: hrirPath
Path to Head Related Impulse Response files. By default it will be set to TELETYPE::HOA.userKernelDir +/+ "FIR/hrir/hrir_ku100_lebedev50":: but you can provide your own.

returns:: A SatieConfiguration.


INSTANCEMETHODS::

METHOD:: handleSpatFormat
Private method to set up the spatializer.

ARGUMENT:: format
A Symbol representing the spatializer format.

table::
## emptySpat || No spat. Expect nothing.
## monoSpat || Mono spat
## stereoListener || A stereo panner
## stereoPanner || Another stereo panner (use stereoListener)
## quadVBAP || 4 channel ring (2D)
## ambi1 || 4-channel spatialized output in ambisonic 3rd order format
## five1VBAP || 5.1 layout (2D)
## exaVBAP || 6 channel ring (2D)
## cube || 8 channel 3D layout (Cube corners)
## octoVBAP || 8 channel ring (2D)
## _1474_VBAP || 16 channel dome (IEM)
## dodecVBAP || 20 channel layout (3D)
## labodomeVBAP || 24 channel speaker layout on a sphere (minidome at the SAT)
## domeVBAP || 31 channel sphere (SAT dome)
::

METHOD:: effects
Instance variable for effects plugins.

returns:: Dictionary

METHOD:: serverOptions
Get/set options

returns:: supernova.options

METHOD:: mappers
Instance variable holds mapper plugins.

returns:: Dictionary

METHOD:: sources
Instance variable holds audio plugins

returns:: Dictionary

METHOD:: debug
Print SATIE debug messages

METHOD:: spatializers
Instance variable hold spatializer plugins

returns:: Dictionary

METHOD:: listeningFormat
Spatializer(s) in use

returns:: Array

METHOD:: satieRoot
Absolute path to the root of SATIE's source code

returns:: String

METHOD:: satieUserSupportDir
Absolute path to SATIE's user support directory

table::
## Linux || ~/.local/share/satie/
## macOS || ~/Library/Application Support/satie/
## Windows || C:\Users\EMPHASIS::username::\AppData\Local\satie\
::
returns:: String

METHOD:: loadPluginDir
Loads a SATIE plugin directory

argument:: path
A String representing the path to a plugin directory

discussion::
The plugin directory must be structured appropriately. See LINK::Classes/SatiePlugin::

METHOD:: init
Private init

METHOD:: generateSynthdefs
Boolean. Tells the SATIE server whether it should generate audio plugins SynthDefs automatically upon boot. True by default.
If set to false, the user needs to run teletype::makeSynthDef:: by hand for each desired plugin.


METHOD:: server
Current server
returns:: Server instance

EXAMPLES::

code::
// define a server, SATIE needs it
s = Server.supernova.local;
// instantiate a SatieConfiguration. Here we will use a stereo spatializer
~satieConfiguration = SatieConfiguration.new(s, [\stereoListener]);
::
