TITLE:: SATIE Plugins
summary:: Writing audio plugins for SATIE
categories:: Libraries>SATIE
related:: Overview/SATIE-Overview, Classes/Satie, Classes/SatiePlugin, Classes/SpatializerPlugin

Go back to link::Overview/SATIE-Overview::

Previous Section: link::Examples/Effects::

Next Section: link::Examples/Ambi::


DESCRIPTION::

SATIE plugins are SuperCollider functions. They are later wrapped together in order to generate several synths. There are three categories of plugins:


SUBSECTION::Audio plugins
Are inserted into the signal chain and provide either a sound source or effect. Usually they generate audio signals. The following families of plugins fall into this category:
LIST::
## audiosources (generators)
## effects
## post-processors
## spatializers
::
SUBSECTION::Mappers
Their purpose is to apply mappings (i.e. via functions) to audio plugins' paramers
SUBSECTION::Analysers
Plugins that are inserted into audio plugins signal path, before spatialization stage, and their sole purpose is to analyse some signal feature (i.e. envelope, pitch, etc.) and forward it via OSC. See link::Examples/OSC:: for the OSC message description and an example use. These plugins should not return any audio but should make use of LINK::Classes/SendTrig:: and LINK::Classes/SendReply:: UGens to send triggers or streams of desired information.
ANCHOR::analysers example::
CODE::
(
s.reboot;
s = Server.scsynth.local;
~satieConfiguration = SatieConfiguration.new(s, [], outBusIndex: [0], ambiOrders: [1,2,3], minOutputBusChannels: 4);
~satie = Satie.new(~satieConfiguration);
~satie.boot();
)
// use some GUI if you need to
s.meter;
s.makeGui;
s.plotTree;

// set up an OSC client to receive on port 18060
// then execute the following lines
~satie.makeAmbi(\input1,\MonoIn,[],[], [\envTrigger],2,[~satie.satieConfiguration.ambiBusIndex[0]] );
~satie.makeAmbi(\drone,\misDrone,[],[], [\envFollow],2,[~satie.satieConfiguration.ambiBusIndex[0]] );

~satie.makeSourceInstance(\in1, \input1, \default)
~satie.groupInstances[\default][\in1].set(\t_trig, 1, \aziDeg, 30, \eleDeg, 30,\gainDB, -10, \envTrigger_triggerLevel, 0.12)

~satie.makeSourceInstance(\droney, \drone_kamikaze, \default)
~satie.groupInstances[\default][\droney].set(\t_trig, 1, \aziDeg, -30, \eleDeg, 30,\gainDB, -10, \envTrigger_triggerLevel, 0.12)
::

The plugins are kept in SOFT::plugins:: directory within SATIE tree. They are further organized in directories by family and all plugins are loaded at configuration time and are kept in the following LINK::Classes/SatieConfiguration:: members:
List::
## .audioPlugins
## .fxPlugins
## .spatPlugins
## .mapperPlugins
## .postprocessorPlugins
## .monitoringPlugins
::

Other plugins can be added from, arbitrary location, by adding to the appropriate dictionaries (see SatiePlugins and SatieConfiguration).
Every plugin should follow the following format:
code::
// Mandatory "fields" of a plugin:

// name
~name = \pluginName;
// description
~description = "Short description of plugin's purpose or functionality";
// function definition
~function = {| sfreq = 200 |
    // note, that the plugin should not contain Out uGen.
    FSinOsc.ar(sfreq)
};
::
Each plugin resides in its own .scd file. Each field is a global variable which gets consumed by the plugin loader, one at a time.

SECTION:: Working with plugins on-the-fly
ANCHOR::onthefly::

Sometimes, especially when developing new instruments, it is desirable to just doodle on a scratchpad without the need of saving a loading files off the disk. link::Classes/SatiePlugins#addAudioPlugin:: allows for loading a plugin defined in an environment, mimicking the above plugin creation guidelines:

code::
// prepare SATIE in the usual way
(
s = Server.supernova.local;
~satieConfiguration = SatieConfiguration.new(s, [\stereoListener], numAudioAux: 2);
~satieConfiguration.debug = false;
~satie = Satie.new(~satieConfiguration);
~satie.boot();
)
// synth definition
~instr = Environment.make({
	~name = \simpleOSC;
	~description = "test instrument";
	~function = {| sfreq = 200|
		SinOsc.ar(sfreq)
	};
});
// add it to the list of registered plugins
~satie.audioPlugins.addAudioPlugin(~instr);
// compile the synthdef for use with SATIE
~satie.makeSynthDef(\mySound, \simpleOSC, [], [~satie.aux[0]], [],~satieConfiguration.listeningFormat, [0]);
::


Go back to link::Overview/SATIE-Overview::

Previous Section: link::Examples/Effects::

Next Section: link::Examples/Ambi::

