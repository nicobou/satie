TITLE:: Advanced use of process
summary:: A more complex use of process
categories:: Libraries>SATIE

Go back to link::Overview/SATIE-Overview:: previous: link::Examples/ProcessComplex::  

SECTION::Advanced process

We init SATIE as usual:
code::
(
s = Server.supernova.local;
~satieConfiguration = SatieConfiguration.new(s, \stereoListener);
~satieConfiguration.serverOptions.blockSize = 1024;
~satieConfiguration.debug = false;
~satie = Satie.new(~satieConfiguration);
~satie.boot();
s.waitForBoot({
	~satie.makeSynthDef(\string, \zkarpluck1, [], [], [~satieConfiguration.listeningFormat], [0]);
	// be sure the synthDef is compiled on the server	s.meter;
	s.makeGui;
	s.plotTree;
})
)
::

And we define the process. The process will implement some specific methods.

code::
(
//process definition
~helloProcess = Environment.make({
	~routine;
	~noteLow = 60;
	~noteHi = 80;
	~makeRoutine = { |self |
		self.routine = Routine {
			// Here the routine creates sound objects without deleting them util the routine is stopped.
			loop { arg item;
				var nodename=("testNode"++"_"++item).asSymbol;
				var synth;
				var note;
				var elev = Prand([-90, -60, 30, 0, 90]).asStream;
				note = rrand(self.noteLow, self.noteHi);
				synth = ~satie.makeKamikaze(nodename.asSymbol, \string);
				synth.set(
					\t_trig, 1,
					\gainDB, rrand(-40, -30),
					\note, [note, 1, 0.5],
					\aziDeg, rrand(-180,180),
					\spread, 0,
					\eleDeg, elev.next
				);
				0.5.wait;
			}
		};
	};
	~start = { | self | self.routine.reset; self.routine.play };

	// setup and cleanup methods are mandatory, particularly for use via OSC
	~setup = { | self | self.makeRoutine; self.start; };
	~cleanup = { | self | self.routine.stop;};
	// let's define a set method because OSC protocol makes use of it
	~set = { | self, key, prop |
		"self: %, key: %, property: %".format(self[key], key, prop).postln;
		self[key] = prop;
	};
	// let's define an update method for process as well.
	setUpdate = { | self, aziDeg, eleDeg, gainDB, delayMs, lpHz, distance  |
		"process %".format([aziDeg, eleDeg, gainDB, delayMs, lpHz, distance]).postln;
	};
});
)
::

code::
// register the process with SATIE
~process = ~satie.makeProcess(\testProcess, ~helloProcess);
// setup will will execute it automatically
~process.setup.value();
// stop the process
~process.cleanup;
::
code::
(
// invoke specific process functions
~process.makeRoutine;
~process.start;
~process.cleanup;
)
::

We can also/alternatively access processes via SATIE's dictionaries
code::
(
~satie.processes[\testProcess].makeRoutine
~satie.processes[\testProcess].start
)
::

And, of course, we use it remotely, via OSC:
note::
soft::createProcess:: handler automatically executes soft::setup:: method. Similarly, soft::deleteNode:: handler automatically executes soft::cleanup:: method. See the link::Examples/OSC:: and link::Classes/OSC:: for more information ::
code::
(
// connect to satie's RX port
b = NetAddr.new("127.0.0.1", 18032);
b.sendMsg("/satie/scene", "debugFlag", 1);    // activate  debugging printing to console
// create process node - unique group will be automatically generated for each created
b.sendMsg("/satie/scene", "createProcess",  "myProcess", "process://testProcess" );
)

// and send it some messages
b.sendMsg("/satie/process/update", "myProcess", 60,0, rrand(-10,-06),0,15000,20);
b.sendMsg("/satie/process/set", "myProcess", "noteLow", 60, "noteHi", 63); 
b.sendMsg("/satie/process/set", "myProcess", "noteLow", 40, "noteHi", 45); 
// remove it
b.sendMsg("/satie/scene", "deleteNode", "myProcess");
::

Go back to link::Overview/SATIE-Overview::

Previous Section: link::Examples/Processes::

