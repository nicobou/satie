TITLE:: Processes
summary:: Introductino to SATIE processes

We start with setting up SATIE:

code::
(
s = Server.supernova.local;
~satieConfiguration = SatieConfiguration.new(s, "stereo");
~satieConfiguration.serverOptions.blockSize = 1024;
~satieConfiguration.debug = false;
~satie = Satie.new(~satieConfiguration);
// s.reboot();
s.waitForBoot({
	~satie.makeSatieGroup(\default);
	~satie.makeSynthDef(\boo, \misDrone, [], [], [~satieConfiguration.spat], [0]);
	~satie.makeSynthDef(\test, \testtone, [], [], [~satieConfiguration.spat], [0]);
	~satie.makeSynthDef(\string, \zkarpluck1, [], [], [~satieConfiguration.spat], [0]);
	s.meter;
	s.makeGui;
	s.plotTree;
})
)
::

And we define the process

code::
(
//process definition
~env = Environment.make({
	~routine;
	~makeRoutine = { |self |
		self.routine = Routine {
			// Here the routine creates sound objects without deleting them util the routine is stopped.
			loop { arg item;
				var nodename=("testNode"++"_"++item).asSymbol;
				var synth;
				var note;
				var elev = Prand([-90, -60, 30, 0, 90]).asStream;
				note = rrand(60, 63);
				synth = ~satie.makeKamikaze(nodename.asSymbol, \string);
				synth.set(
					\t_trig, 1,
					\gainDB, rrand(-40, -30),
					\note, [note, 1, 0.5],
					\aziDeg, rrand(-180,180),
					\spread, 0,
					\eleDeg, elev.next
				);
				0.5.wait;
			}
		};
	};
	~start = { | self | self.routine.play; };
});
)
::

code::(
// will call init
~process = ~satie.makeProcess(\testProcess, ~env);
)
::

code::
(
// invoke specific process functions
~process.makeRoutine;
~process.start;
)
::

We can also/alternatively access processes via SATIE's dictionaries
code::
(
~satie.processes[\testProcess].makeRoutine
~satie.processes[\testProcess].start
)
::
