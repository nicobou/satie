TITLE:: Processes
summary:: Introductino to SATIE processes
categories:: Libraries
We start with setting up SATIE:

code::
(
s = Server.supernova.local;
~satieConfiguration = SatieConfiguration.new(s, \stereoListener);
~satieConfiguration.serverOptions.blockSize = 1024;
~satieConfiguration.debug = false;
~satie = Satie.new(~satieConfiguration);
~satie.boot();
s.waitForBoot({
	~satie.makeSynthDef(\boo, \misDrone, [], [], [~satieConfiguration.listeningFormat], [0]);
	~satie.makeSynthDef(\test, \testtone, [], [], [~satieConfiguration.listeningFormat], [0]);
	~satie.makeSynthDef(\string, \zkarpluck1, [], [], [~satieConfiguration.listeningFormat], [0]);
	// dummy
	~satie.makeSynthDef(\dummyPlugin, \emptySource,  [], [], [~satieConfiguration.listeningFormat], [0]);    // dummy synthdef, used for new nodes
	// be sure the synthDef is compiled on the server	s.meter;
	s.makeGui;
	s.plotTree;
})
)
::

And we define the process

code::
(
//process definition
~env = Environment.make({
	~routine;
	~makeRoutine = { |self |
		self.routine = Routine {
			// Here the routine creates sound objects without deleting them util the routine is stopped.
			loop { arg item;
				var nodename=("testNode"++"_"++item).asSymbol;
				var synth;
				var note;
				var elev = Prand([-90, -60, 30, 0, 90]).asStream;
				note = rrand(60, 63);
				synth = ~satie.makeKamikaze(nodename.asSymbol, \string);
				synth.set(
					\t_trig, 1,
					\gainDB, rrand(-40, -30),
					\note, [note, 1, 0.5],
					\aziDeg, rrand(-180,180),
					\spread, 0,
					\eleDeg, elev.next
				);
				0.5.wait;
			}
		};
	};
	~start = { | self | self.routine.reset; self.routine.play };

	// setup and cleanup methods are mandatory, particularly for use via OSC
	~setup = { | self | self.makeRoutine; self.start; };
	~cleanup = { | self | self.routine.stop;};
});
)
::

code::(
	// will call
	~process = ~satie.makeProcess(\testProcess, ~env);
)
::
~process.setup.value();
code::
(
// invoke specific process functions
~process.makeRoutine;
~process.start;
~process.cleanup;
)
::

We can also/alternatively access processes via SATIE's dictionaries
code::
(
~satie.processes[\testProcess].makeRoutine
~satie.processes[\testProcess].start
)
::

And we can also use it remotely, via OSC:

code::
(
// connect to satie's RX port
b = NetAddr.new("127.0.0.1", 18032);

// create process node - unique group will be automatically generated for each created
b.sendMsg("/satie/scene", "createProcess",  "myProcess", "process://testProcess" );

// remove it
b.sendMsg("/satie/scene", "deleteNode", "myProcess");

)
::
